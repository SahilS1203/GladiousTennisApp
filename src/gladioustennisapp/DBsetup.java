/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gladioustennisapp;

import java.awt.Color;
import com.mydia.cs.Utility;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JProgressBar;
import java.io.*;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;


/**
 *
 * @author salga
 */
public class DBsetup extends javax.swing.JFrame {

    /**
     * Creates new form DBsetup
     */
    progressThread t1;
    public DBsetup() {
        initComponents();
        getContentPane().setBackground(new Color(220,20,60));
    }
    
    class progressThread extends Thread{
        int MIN = 10;
        int MAX = 100;
        String databaseName = "tennis";
        String pw=passTxtField.getText();
        String pt=portTxtField.getText();
        String uname=usernameTxtField.getText();
        JProgressBar jBar;
        
        progressThread(JProgressBar pbar){
            pbar = progressBar;
        }
        
        
        public void run(){
            progressBar.setMinimum(MIN);
            progressBar.setMaximum(MAX);
            progressBar.setValue(0);
            
            try {
                progressBar.setValue(30);
                Thread.sleep(500);
                
                jLabel4.setText("Creating New Database...");
                Utility.createNewDb(databaseName,pw,pt,uname);
                progressBar.setValue(70);
                Thread.sleep(500);
                
                jLabel4.setText("Setting up New Database...");
                Utility.setSeedDatabase(databaseName, pw, pt,uname);
                progressBar.setValue(100);
                
                jLabel4.setText(" Database completed...");

            } catch (InterruptedException ex) {
                System.out.println("Thread Exception: "+ ex.getMessage());
            } 
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        passTxtField = new javax.swing.JTextField();
        portTxtField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        usernameTxtField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Setup Database");

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Gadugi", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter your MySQL password:");

        jLabel3.setFont(new java.awt.Font("Gadugi", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter your MySQL port:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));

        jButton2.setText("5: Import Class Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Gadugi", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Enter your MySQL username:");

        jButton3.setText("1: Import Employee Data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("2: Import Manager Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("3: Import Student Data");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("4: Import Transaction Data");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("6: Import Student Class Data");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("7: Import Payment Data");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("8: Import Progress Data");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("9: Import Reminder Data");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("10: Import Tournament Data");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Back");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gladioustennisapp/Webp.net-resizeimage (1).png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(84, 84, 84))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(jLabel1)))
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(139, 139, 139)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel2)
                                                    .addComponent(jLabel3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(portTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(passTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8)
                            .addComponent(jButton10)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(jButton12)
                        .addContainerGap())
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String uname= usernameTxtField.getText();
        String pw= passTxtField.getText();
        String port = portTxtField.getText();
        if ((pw.equals(""))||(port.equals("")||(uname.equals("")))){
            JOptionPane.showMessageDialog(null,"Please fill in all the details!");      
        }
        else{
            try {
            Utility.dbusername=uname;
            Utility.dbpassword=pw;
            Utility.dbport=port;
            t1 = new progressThread(progressBar);
            t1.start();
            BufferedWriter bw = null;
            bw = new BufferedWriter(new FileWriter("details.txt",true));
            bw.write(uname+","+pw+","+port+"\n");  
            bw.close();
            } catch (IOException ex) {
                Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
            }
            } 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"classdata.xlsx";
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO class (employeeid, date, starttime, endtime) VALUES (?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                int employeeid = (int) nextCell.getNumericCellValue();
                                statement.setInt(1, employeeid);
                                break;
                            case 1:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(2, sqlDate);
                            case 2:
                                Date starttime = nextCell.getDateCellValue();
                                java.sql.Time sqlstart = new java.sql.Time(starttime.getTime());
                                statement.setTime(3, sqlstart);
                            case 3:
                                Date endtime = nextCell.getDateCellValue();
                                java.sql.Time sqlend = new java.sql.Time(endtime.getTime());
                                statement.setTime(4, sqlend);
                                
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The class data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
                                                
            try {
                
                String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
                String username = usernameTxtField.getText();
                String password = passTxtField.getText();
                
                String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
                String str = path.substring(0, path.length() - 21);
                String finalpath = str+"employeedata.xlsx";

                int batchSize = 20;
                
                Connection connection = null;
                try {
                    FileInputStream inputStream = new FileInputStream(finalpath);
                    Workbook workbook = new XSSFWorkbook(inputStream);
                    
                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();
                    
                    connection = DriverManager.getConnection(jdbcURL, username, password);
                    connection.setAutoCommit(false);
                    
                    String sql = "INSERT INTO employee (role, fullname, email, phonenumber, salary, username, password) VALUES (?, ?, ?, ?, ?, ?, ?)";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    
                    int count = 0;
                    
                    rowIterator.next(); // skip the header row
                    
                    while (rowIterator.hasNext()) {
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            
                            int columnIndex = nextCell.getColumnIndex();
                            
                            switch (columnIndex) {
                                case 0:
                                    String role = nextCell.getStringCellValue();
                                    statement.setString(1, role);
                                    break;
                                case 1:
                                    String fullname = nextCell.getStringCellValue();
                                    statement.setString(2, fullname);
                                    break;
                                case 2:
                                    String email = nextCell.getStringCellValue();
                                    statement.setString(3, email);
                                    break;
                                case 3:
                                    String phonenumber = nextCell.getStringCellValue();
                                    statement.setString(4, phonenumber);
                                    break;
                                case 4:
                                    String salary = nextCell.getStringCellValue();
                                    statement.setString(5, salary);
                                    break;
                                case 5:
                                    String eusername = nextCell.getStringCellValue();
                                    statement.setString(6, eusername);
                                    break;
                                case 6:
                                    String epassword = nextCell.getStringCellValue();
                                    statement.setString(7, epassword);
                                    break;
                                    
                            }
                            
                        }
                        statement.addBatch();
                        
                        if (count % batchSize == 0) {
                            statement.executeBatch();
                        }
                        
                    }
                    
                    workbook.close();
                    
                    // execute the remaining queries
                    statement.executeBatch();
                    
                    connection.commit();
                    connection.close();
                JOptionPane.showMessageDialog(null, "The employee data has been imported.");
                    
                } 
               
                catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                } catch (SQLException ex2) {
                    System.out.println("Database error");
                    ex2.printStackTrace();
                }
                
            } catch (URISyntaxException ex) {
                Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"managerdata.xlsx";
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO manager (fullname, email, phonenumber, username, password) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                String fullname = nextCell.getStringCellValue();
                                statement.setString(1, fullname);
                                break;
                            case 1:
                                String email = nextCell.getStringCellValue();
                                statement.setString(2, email);
                                break;
                            case 2:
                                String phonenumber = nextCell.getStringCellValue();
                                statement.setString(3, phonenumber);
                                break;
                            case 3:
                                String eusername = nextCell.getStringCellValue();
                                statement.setString(4, eusername);
                                break;
                            case 4:
                                String epassword = nextCell.getStringCellValue();
                                statement.setString(5, epassword);
                                break;
                                
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The manager data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"studentdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO student (fullname, email, dob, phonenumber, username, password) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                String fullname = nextCell.getStringCellValue();
                                statement.setString(1, fullname);
                                break;
                            case 1:
                                String email = nextCell.getStringCellValue();
                                statement.setString(2, email);
                                break;
                            case 2:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(3, sqlDate);
                                break;
                            case 3:
                                String phonenumber = nextCell.getStringCellValue();
                                statement.setString(4, phonenumber);
                                break;
                            case 4:
                                String eusername = nextCell.getStringCellValue();
                                statement.setString(5, eusername);
                                break;
                            case 5:
                                String epassword = nextCell.getStringCellValue();
                                statement.setString(6, epassword);
                                break;
                                
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The student data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"transactiondata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO transaction (name, inflow, date, totalamount) VALUES (?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                String name = nextCell.getStringCellValue();
                                statement.setString(1, name);
                                break;
                            case 1:
                                int inflow = (int) nextCell.getNumericCellValue();
                                statement.setInt(2, inflow);
                                break;
                            case 2:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(3, sqlDate);
                                break;
                            case 3:
                                int totalamount = (int) nextCell.getNumericCellValue();
                                statement.setInt(4, totalamount);
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The transaction data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"studentclassdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO class_student (classid, studentid) VALUES (?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                int classid = (int) nextCell.getNumericCellValue();
                                statement.setInt(1, classid);
                                break;
                            case 1:
                                int studentid = (int) nextCell.getNumericCellValue();
                                statement.setInt(2, studentid);
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The student class data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"paymentdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO payment (studentid, date, totalamount, paid) VALUES (?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                int studentid = (int) nextCell.getNumericCellValue();
                                statement.setInt(1, studentid);
                                break;
                            case 1:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(2, sqlDate);
                                break;
                            case 2:
                                int totalamount = (int) nextCell.getNumericCellValue();
                                statement.setInt(3, totalamount);
                                break;
                            case 3:
                                int paid = (int) nextCell.getNumericCellValue();
                                statement.setInt(4, paid);
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
                
            JOptionPane.showMessageDialog(null, "The payment data has been imported.");    
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {                                         
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"progressdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO progress (studentid, employeeid, matchesplayed, wins, tournamentvictories, pointsplayed, pointswon, gamesplayed, gameswon, serves, serveswon, aces, doublefaults, breakpointsplayed, breakpointswon) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                int studentid = (int) nextCell.getNumericCellValue();
                                statement.setInt(1, studentid);
                                break;
                            case 1:
                                int employeeid = (int) nextCell.getNumericCellValue();
                                statement.setInt(2, employeeid);
                                break;
                            case 2:
                                int mp = (int) nextCell.getNumericCellValue();
                                statement.setInt(3, mp);
                                break;
                            case 3:
                                int w = (int) nextCell.getNumericCellValue();
                                statement.setInt(4, w);
                                break;
                            case 4:
                                int tv = (int) nextCell.getNumericCellValue();
                                statement.setInt(5, tv);
                                break;
                            case 5:
                                int pp = (int) nextCell.getNumericCellValue();
                                statement.setInt(6, pp);
                                break;
                            case 6:
                                int pw = (int) nextCell.getNumericCellValue();
                                statement.setInt(7, pw);
                                break;
                            case 7:
                                int gp = (int) nextCell.getNumericCellValue();
                                statement.setInt(8, gp);
                                break;
                            case 8:
                                int gw = (int) nextCell.getNumericCellValue();
                                statement.setInt(9, gw);
                                break;
                            case 9:
                                int s = (int) nextCell.getNumericCellValue();
                                statement.setInt(10, s);
                                break;
                            case 10:
                                int sw = (int) nextCell.getNumericCellValue();
                                statement.setInt(11, sw);
                                break;
                            case 11:
                                int a = (int) nextCell.getNumericCellValue();
                                statement.setInt(12, a);
                                break;
                            case 12:
                                int df = (int) nextCell.getNumericCellValue();
                                statement.setInt(13, df);
                                break;
                            case 13:
                                int br = (int) nextCell.getNumericCellValue();
                                statement.setInt(14, br);
                                break;
                            case 14:
                                int brw = (int) nextCell.getNumericCellValue();
                                statement.setInt(15, brw);                        
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
                
            JOptionPane.showMessageDialog(null, "The progress data has been imported.");    
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {                                          
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"reminderdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO reminder (date, time, studentid) VALUES (?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(1, sqlDate);
                                break;
                            case 1:
                                Date time = nextCell.getDateCellValue();
                                java.sql.Time sqltime = new java.sql.Time(time.getTime());
                                statement.setTime(2, sqltime);
                                break;
                            case 2:
                                int studentid = (int) nextCell.getNumericCellValue();
                                statement.setInt(3, studentid);
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The reminder data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        try {                                          
            String jdbcURL = "jdbc:mysql://localhost:"+portTxtField.getText()+"/tennis";
            String username = usernameTxtField.getText();
            String password = passTxtField.getText();
            
            String path = new File(DBsetup.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            String str = path.substring(0, path.length() - 21);
            String finalpath = str+"tournamentdata.xlsx";
            
            
            int batchSize = 20;
            
            Connection connection = null;
            try {
                
                FileInputStream inputStream = new FileInputStream(finalpath);
                
                Workbook workbook = new XSSFWorkbook(inputStream);
                
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = firstSheet.iterator();
                
                connection = DriverManager.getConnection(jdbcURL, username, password);
                connection.setAutoCommit(false);
                
                String sql = "INSERT INTO tournament (tournamenttype, completed, numberofplayers, date, starttime, endtime, employeeid, winner_studentid) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                rowIterator.next(); // skip the header row
                
                while (rowIterator.hasNext()) {
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();
                        
                        int columnIndex = nextCell.getColumnIndex();
                        
                        switch (columnIndex) {
                            case 0:
                                String type = nextCell.getStringCellValue();
                                statement.setString(1, type);
                                break;
                            case 1:
                                int completed = (int) nextCell.getNumericCellValue();
                                statement.setInt(2, completed);
                                break;
                            case 2:
                                int numberofplayers = (int) nextCell.getNumericCellValue();
                                statement.setInt(3, numberofplayers);
                                break;
                            case 3:
                                Date date = nextCell.getDateCellValue();
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                                statement.setDate(4, sqlDate);
                                break;
                            case 4:
                                Date starttime = nextCell.getDateCellValue();
                                java.sql.Time sqlstart = new java.sql.Time(starttime.getTime());
                                statement.setTime(5, sqlstart);
                                break;
                            case 5:
                                Date endtime = nextCell.getDateCellValue();
                                java.sql.Time sqlend = new java.sql.Time(endtime.getTime());
                                statement.setTime(6, sqlend);
                                break;
                            case 6:
                                int employeeid = (int) nextCell.getNumericCellValue();
                                statement.setInt(7, employeeid);
                                break;
                            case 7:
                                int winner_studentid = (int) nextCell.getNumericCellValue();
                                statement.setInt(8, winner_studentid);
                                break;
                        }
                        
                    }
                    statement.addBatch(); 
                    
                    if (count % batchSize == 0) {
                        statement.executeBatch();
                    }
                    
                }
                
                workbook.close();
                
                // execute the remaining queries
                statement.executeBatch();
                
                connection.commit();
                connection.close();
            JOptionPane.showMessageDialog(null, "The tournament data has been imported.");    
                
            } catch (IOException ex1) {
                System.out.println("Error reading file");
                ex1.printStackTrace();
            } catch (SQLException ex2) {
                System.out.println("Database error");
                ex2.printStackTrace();
            }
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(DBsetup.class.getName()).log(Level.SEVERE, null, ex);
        } 
    
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        new Interface().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBsetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBsetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBsetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBsetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBsetup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField passTxtField;
    private javax.swing.JTextField portTxtField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField usernameTxtField;
    // End of variables declaration//GEN-END:variables
}
