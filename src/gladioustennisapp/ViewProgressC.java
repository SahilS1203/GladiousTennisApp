/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gladioustennisapp;

import com.mydia.cs.Utility;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author salga
 */
public class ViewProgressC extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    public ViewProgressC() {
        initComponents();
        getContentPane().setBackground(new Color(220,20,60));
        try
            {   
            Class.forName("com.mysql.cj.jdbc.Driver"); 
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:"+Utility.dbport+"/tennis",Utility.dbusername,Utility.dbpassword);
            
            Statement stat = con.createStatement();
            String qry="select studentid from progress";
            ResultSet r = stat.executeQuery(qry);
            while (r.next()){
                String studentid= r.getString("studentid");
                Statement st = con.createStatement();
                String sql="select fullname from student where studentid LIKE '%"+studentid+"%'";
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()){
                    String name = rs.getString("fullname");
                nameCombo.addItem(name);
            }  
            }
            
            
            con.close();
        }
        catch(SQLException se){
             se.printStackTrace();
        }
        catch(Exception e){
            e.printStackTrace();     
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        matchStats = new javax.swing.JButton();
        nameCombo = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        matchStats3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statsTable = new javax.swing.JTable();
        loadBtn = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(220, 20, 60));
        setForeground(java.awt.Color.red);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gladioustennisapp/Webp.net-resizeimage (1).png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("View Student Progress");

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        matchStats.setBackground(new java.awt.Color(0, 0, 0));
        matchStats.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        matchStats.setForeground(new java.awt.Color(255, 255, 255));
        matchStats.setText("Match Statistics");
        matchStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchStatsActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Student Name:");

        matchStats3.setBackground(new java.awt.Color(0, 0, 0));
        matchStats3.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        matchStats3.setForeground(new java.awt.Color(255, 255, 255));
        matchStats3.setText("Serve Statistics");
        matchStats3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchStats3ActionPerformed(evt);
            }
        });

        statsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matches Played", "Wins", "Tournament Wins", "Points Played", "Points Won", "Games Played", "Games Won", "Serves", "Serves Won", "Aces", "Double Faults", "Break Points Played", "Break Points Won"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statsTable);
        if (statsTable.getColumnModel().getColumnCount() > 0) {
            statsTable.getColumnModel().getColumn(0).setMinWidth(100);
            statsTable.getColumnModel().getColumn(0).setMaxWidth(100);
            statsTable.getColumnModel().getColumn(1).setMinWidth(45);
            statsTable.getColumnModel().getColumn(1).setMaxWidth(45);
            statsTable.getColumnModel().getColumn(2).setMinWidth(120);
            statsTable.getColumnModel().getColumn(2).setMaxWidth(120);
            statsTable.getColumnModel().getColumn(3).setMinWidth(85);
            statsTable.getColumnModel().getColumn(3).setMaxWidth(85);
            statsTable.getColumnModel().getColumn(4).setMinWidth(80);
            statsTable.getColumnModel().getColumn(4).setMaxWidth(80);
            statsTable.getColumnModel().getColumn(5).setMinWidth(95);
            statsTable.getColumnModel().getColumn(5).setMaxWidth(95);
            statsTable.getColumnModel().getColumn(6).setMinWidth(80);
            statsTable.getColumnModel().getColumn(6).setMaxWidth(80);
            statsTable.getColumnModel().getColumn(7).setMinWidth(60);
            statsTable.getColumnModel().getColumn(7).setMaxWidth(60);
            statsTable.getColumnModel().getColumn(8).setMinWidth(80);
            statsTable.getColumnModel().getColumn(8).setMaxWidth(80);
            statsTable.getColumnModel().getColumn(9).setMinWidth(40);
            statsTable.getColumnModel().getColumn(9).setMaxWidth(40);
            statsTable.getColumnModel().getColumn(10).setMinWidth(95);
            statsTable.getColumnModel().getColumn(10).setMaxWidth(95);
            statsTable.getColumnModel().getColumn(11).setMinWidth(125);
            statsTable.getColumnModel().getColumn(11).setMaxWidth(125);
            statsTable.getColumnModel().getColumn(12).setMinWidth(115);
            statsTable.getColumnModel().getColumn(12).setMaxWidth(115);
        }

        loadBtn.setBackground(new java.awt.Color(0, 0, 0));
        loadBtn.setFont(new java.awt.Font("Gadugi", 0, 24)); // NOI18N
        loadBtn.setForeground(new java.awt.Color(255, 255, 255));
        loadBtn.setText("Load Statistics");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(loadBtn)
                .addGap(199, 199, 199)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(matchStats3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchStats)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(nameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(449, 449, 449))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(nameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(matchStats))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(loadBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matchStats3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(47, 47, 47))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        try {
            new CoachDashboard().setVisible(true);
        } catch (MessagingException ex) {
            Logger.getLogger(ViewProgressC.class.getName()).log(Level.SEVERE, null, ex);
        }
     this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_backBtnActionPerformed

    private void matchStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchStatsActionPerformed

        String matchesw = statsTable.getModel().getValueAt(0, 1).toString();
        int matcheswon = Integer.parseInt(matchesw);
        String matches = statsTable.getModel().getValueAt(0, 0).toString();
        int matchesplayed = Integer.parseInt(matches);
        int matchesl= matchesplayed-matcheswon;
        
        DefaultPieDataset matchDataset = new DefaultPieDataset();
        matchDataset.setValue("Matches Won", matcheswon);
        matchDataset.setValue("Matches Lost", matchesl);
        JFreeChart matchChart = ChartFactory.createPieChart3D("Match Statistics", matchDataset, true, true, true);
        PiePlot3D P=(PiePlot3D)matchChart.getPlot();
        ChartFrame frame = new ChartFrame("Pie Chart", matchChart);
        frame.setVisible(true);
        frame.setSize(800,500);
    }//GEN-LAST:event_matchStatsActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed

        String studentid="";
        
        try {
            DefaultTableModel tblModel = (DefaultTableModel)statsTable.getModel();
            tblModel.setRowCount(0);
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewProgressC.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:"+Utility.dbport+"/tennis",Utility.dbusername,Utility.dbpassword);
            
            String qry = "select studentid from student where fullname LIKE '%"+nameCombo.getSelectedItem()+"%'";
            PreparedStatement stat = con.prepareStatement(qry);
            ResultSet rs = stat.executeQuery();
            while (rs.next()){
                studentid = rs.getString("studentid"); 
            String sql = "select * from progress where studentid LIKE '%"+studentid+"%'";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet res = ps.executeQuery();
            
            while (res.next()){
                String matchesplayed = res.getString("matchesplayed");
                String wins = res.getString("wins");
                String tournamentvictories = res.getString("tournamentvictories");
                String pointsplayed = res.getString("pointsplayed");
                String pointswon = res.getString("pointswon");
                String gamesplayed = res.getString("gamesplayed");
                String gameswon = res.getString("gameswon");
                String serves = res.getString("serves");
                String serveswon = res.getString("serveswon");
                String aces = res.getString("aces");
                String doublefaults = res.getString("doublefaults");
                String breakpointsplayed = res.getString("breakpointsplayed");
                String breakpointswon = res.getString("breakpointswon");
                String tbData[] = {matchesplayed, wins, tournamentvictories, pointsplayed, pointswon, gamesplayed, gameswon, serves, serveswon, aces, doublefaults, breakpointsplayed, breakpointswon};
                tblModel.addRow(tbData);  
            }   
            
            }
        } 
        catch (SQLException ex) {
            Logger.getLogger(ManagerDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadBtnActionPerformed

    private void matchStats3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchStats3ActionPerformed
         String servesw = statsTable.getModel().getValueAt(0, 8).toString();
        int serveswon = Integer.parseInt(servesw);
        String serves = statsTable.getModel().getValueAt(0, 7).toString();
        int servesplayed = Integer.parseInt(serves);
        int servesl= servesplayed-serveswon;
        
        DefaultPieDataset matchDataset = new DefaultPieDataset();
        matchDataset.setValue("Serves Won", serveswon);
        matchDataset.setValue("Serves Lost", servesl);
        JFreeChart matchChart = ChartFactory.createPieChart3D("Serve Statistics", matchDataset, true, true, true);
        PiePlot3D P=(PiePlot3D)matchChart.getPlot();
        ChartFrame frame = new ChartFrame("Pie Chart", matchChart);
        frame.setVisible(true);
        frame.setSize(800,500);
    }//GEN-LAST:event_matchStats3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewProgressC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewProgressC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewProgressC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewProgressC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewProgressC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JButton matchStats;
    private javax.swing.JButton matchStats3;
    private javax.swing.JComboBox<String> nameCombo;
    private javax.swing.JTable statsTable;
    // End of variables declaration//GEN-END:variables
}
